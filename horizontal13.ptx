.version 4.2
.target sm_52
.address_size 32

.visible .entry vhgw_horizontal13(
        .param .u32 imgptr,
        .param .u32 imgstep,
        .param .u32 resptr,
        .param .u32 resstep,
        .param .u32 width,
        .param .u32 height,
        .param .u32 fsize
)
{
        .reg .pred      %p<4>;
        .reg .s32       rimgptr, rimgstep, rresptr, rresstep, rwidth, rheight, rfsize;
        .reg .s32       rtidx, rtidy, rbdimy, rgridy;
        .reg .s32       startx, imline;
        .reg .s32       rgx, rhx;
        .reg .s32       srcptr;
        .reg .s32       tmps<8>;
        .reg .s32       lsrc<13>;
        .reg .s32       rgmax<13>, rhmax<13>;
        .reg .s32       rgmax, rhmax, rmax;
        .reg .s32       dst;

        .shared .align 1 .b8 imHx[13520];
        .shared .align 1 .b8 imGx[13520];

//Load kernel parameters
        ld.param.u32    rimgptr, [imgptr];
        ld.param.u32    rimgstep, [imgstep];
        ld.param.u32    rresptr, [resptr];
        ld.param.u32    rresstep, [resstep];
        ld.param.u32    rwidth, [width];
        ld.param.u32    rheight, [height];
        ld.param.u32    rfsize, [fsize];

//Load launch configurtation to registers
        mov.u32         rtidx, %tid.x;
        mov.u32         rbdimy, %ntid.y;
        mov.u32         rgridy, %ctaid.y;
        mov.u32         rtidy, %tid.y;

//Calculate startx and imline
        mul24.lo.u32    startx, rfsize, rtidx;
        mul24.lo.u32    tmps1, rgridy, rbdimy;
        add.s32         imline, rtidy, tmps1;

//Predicate calculation
        setp.lt.u32     %p2, imline, rheight;
        sub.s32         tmps3, startx, rfsize;
        setp.lt.u32     %p3, tmps3, rwidth;
        and.pred        %p1, %p2, %p3;

//Offsets for rhx and rgx
        mad.lo.s32      tmps2, rtidy, 1040, startx;
        mov.u32         tmps1, imGx;
        add.s32         rgx, tmps1, tmps2;
        mov.u32         tmps1, imHx;
        add.s32         rhx, tmps1, tmps2;
        @!%p1 bra       BB20_2;
        bra.uni         BB20_1;

BB20_1:
//Calculate source pointer
        mad.lo.s32      tmps1, imline, rimgstep, startx;
        cvta.to.global.u32      tmps2, rimgptr;
        add.s32         srcptr, tmps2, tmps1;

//Try to prefetch
        add.s32         tmps3, rimgptr, tmps1;
        prefetch.global.L1 [srcptr];

//Load source data
        ld.global.u8    lsrc0, [srcptr];
        ld.global.u8    lsrc1, [srcptr+1];
        ld.global.u8    lsrc2, [srcptr+2];
        ld.global.u8    lsrc3, [srcptr+3];
        ld.global.u8    lsrc4, [srcptr+4];
        ld.global.u8    lsrc5, [srcptr+5];
        ld.global.u8    lsrc6, [srcptr+6];
        ld.global.u8    lsrc7, [srcptr+7];
        ld.global.u8    lsrc8, [srcptr+8];
        ld.global.u8    lsrc9, [srcptr+9];
        ld.global.u8    lsrc10, [srcptr+10];
        ld.global.u8    lsrc11, [srcptr+11];
        ld.global.u8    lsrc12, [srcptr+12];


//Load GX
        mov.s32         rgmax0, lsrc0;
        st.shared.u8    [rgx+ 0],  rgmax0;
        max.s32         rgmax1,  rgmax0,  lsrc1;
        st.shared.u8    [rgx+ 1], rgmax1;
        max.s32         rgmax2,  rgmax1,  lsrc2;
        st.shared.u8    [rgx+ 2], rgmax2;
        max.s32         rgmax3,  rgmax2,  lsrc3;
        st.shared.u8    [rgx+ 3], rgmax3;
        max.s32         rgmax4,  rgmax3,  lsrc4;
        st.shared.u8    [rgx+ 4], rgmax4;
        max.s32         rgmax5,  rgmax4,  lsrc5;
        st.shared.u8    [rgx+ 5],  rgmax5;
        max.s32         rgmax6,  rgmax5,  lsrc6;
        st.shared.u8    [rgx+ 6], rgmax6;
        max.s32         rgmax7,  rgmax6,  lsrc7;
        st.shared.u8    [rgx+ 7], rgmax7;
        max.s32         rgmax8,  rgmax7,  lsrc8;
        st.shared.u8    [rgx+ 8], rgmax8;
        max.s32         rgmax9,  rgmax8,  lsrc9;
        st.shared.u8    [rgx+ 9], rgmax9;
        max.s32         rgmax10, rgmax9,  lsrc10;
        st.shared.u8    [rgx+10], rgmax10;
        max.s32         rgmax11, rgmax10, lsrc11;
        st.shared.u8    [rgx+11], rgmax11;
        max.s32         rgmax12, rgmax11, lsrc12;
        st.shared.u8    [rgx+12], rgmax12;

//Load HX
        mov.s32         rhmax12, lsrc12;
        st.shared.u8    [rhx+12], rhmax12;
        max.s32         rhmax11, rhmax12, lsrc11;
        st.shared.u8    [rhx+11], rhmax11;
        max.s32         rhmax10, rhmax11, lsrc10;
        st.shared.u8    [rhx+10], rhmax10;
        max.s32         rhmax9, rhmax10, lsrc9;
        st.shared.u8    [rhx+9], rhmax9;
        max.s32         rhmax8, rhmax9, lsrc8;
        st.shared.u8    [rhx+8], rhmax8;
        max.s32         rhmax7, rhmax8, lsrc7;
        st.shared.u8    [rhx+7], rhmax7;
        max.s32         rhmax6, rhmax7, lsrc6;
        st.shared.u8    [rhx+6], rhmax6;
        max.s32         rhmax5, rhmax6, lsrc5;
        st.shared.u8    [rhx+5], rhmax5;
        max.s32         rhmax4, rhmax5, lsrc4;
        st.shared.u8    [rhx+4], rhmax4;
        max.s32         rhmax3, rhmax4, lsrc3;
        st.shared.u8    [rhx+3], rhmax3;
        max.s32         rhmax2, rhmax3, lsrc2;
        st.shared.u8    [rhx+2], rhmax2;
        max.s32         rhmax1, rhmax2, lsrc1;
        st.shared.u8    [rhx+1], rhmax1;
        max.s32         rhmax0, rhmax1, lsrc0;
        st.shared.u8    [rhx], rhmax0;

BB20_2:
        bar.sync        0;
        @!%p1 bra       BB20_4;
        bra.uni         BB20_3;

BB20_3:
        cvta.to.global.u32      tmps1, rresptr;
        mad.lo.s32      tmps2, imline, rresstep, startx;
        add.s32         dst, tmps1, tmps2;

        ld.shared.u8    rhmax, [rhx+-6];
        max.s32         rmax, rgmax6, rhmax;
        st.global.u8    [dst+ 0], rmax;

        ld.shared.u8    rhmax, [rhx+-5];
        max.s32         rmax, rgmax7, rhmax;
        st.global.u8    [dst+ 1], rmax;

        ld.shared.u8    rhmax, [rhx+-4];
        max.s32         rmax, rgmax8, rhmax;
        st.global.u8    [dst+ 2], rmax;

        ld.shared.u8    rhmax, [rhx+-3];
        max.s32         rmax, rgmax9, rhmax;
        st.global.u8    [dst+ 3], rmax;

        ld.shared.u8    rhmax, [rhx+-2];
        max.s32         rmax, rgmax10, rhmax;
        st.global.u8    [dst+ 4], rmax;

        ld.shared.u8    rhmax, [rhx+-1];
        max.s32         rmax, rgmax11, rhmax;
        st.global.u8    [dst+ 5], rmax;

        max.s32         rmax, rgmax12, rhmax0;
        st.global.u8    [dst+ 6], rmax;

        ld.shared.u8    rgmax, [rgx+13];
        max.s32         rmax, rgmax, rhmax1;
        st.global.u8    [dst+ 7], rmax;

        ld.shared.u8    rgmax, [rgx+14];
        max.s32         rmax, rgmax, rhmax2;
        st.global.u8    [dst+ 8], rmax;

        ld.shared.u8    rgmax, [rgx+15];
        max.s32         rmax, rgmax, rhmax3;
        st.global.u8    [dst+ 9], rmax;

        ld.shared.u8    rgmax, [rgx+16];
        max.s32         rmax, rgmax, rhmax4;
        st.global.u8    [dst+10], rmax;

        ld.shared.u8    rgmax, [rgx+17];
        max.s32         rmax, rgmax, rhmax5;
        st.global.u8    [dst+11], rmax;

        ld.shared.u8    rgmax, [rgx+18];
        max.s32         rmax, rgmax, rhmax6;
        st.global.u8    [dst+12], rmax;
BB20_4:
        ret;
}
