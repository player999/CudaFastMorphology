.version 4.2
.target sm_52
.address_size 32

.visible .entry vhgw_horizontal13(
        .param .u32 imgptr,
        .param .u32 imgstep,
        .param .u32 resptr,
        .param .u32 resstep,
        .param .u32 width,
        .param .u32 height,
        .param .u32 fsize
)
{
        .reg .pred      %p<4>;
        .reg .s16       %rs<3>;
        .reg .s32       %r<128>;
        .reg .s32       rimgptr, rimgstep, rresptr, rresstep, rwidth, rheight, rfsize;
        .reg .s32       rtidx, rtidy, rbdimy, rgridy;
        .reg .s32       startx, imline;
        .reg .s32       rgx, rhx;
        .reg .s32       srcptr;
        .reg .s32       tmps<8>;

        .shared .align 1 .b8 imHx[13520];
        .shared .align 1 .b8 imGx[13520];

//Load kernel parameters
        ld.param.u32    rimgptr, [imgptr];
        ld.param.u32    rimgstep, [imgstep];
        ld.param.u32    rresptr, [resptr];
        ld.param.u32    rresstep, [resstep];
        ld.param.u32    rwidth, [width];
        ld.param.u32    rheight, [height];
        ld.param.u32    rfsize, [fsize];

//Load launch configurtation to registers
        mov.u32         rtidx, %tid.x;
        mov.u32         rbdimy, %ntid.y;
        mov.u32         rgridy, %ctaid.y;
        mov.u32         rtidy, %tid.y;

//Calculate startx and imline
        mul24.lo.u32    startx, rfsize, rtidx;
        mul24.lo.u32    tmps1, rgridy, rbdimy;
        add.s32         imline, rtidy, tmps1;

//Predicate calculation
        setp.lt.u32     %p2, imline, rheight;
        sub.s32         tmps3, startx, rfsize;
        setp.lt.u32     %p3, tmps3, rwidth;
        and.pred        %p1, %p2, %p3;

//Offsets for rhx and rgx
        mad.lo.s32      tmps2, rtidy, 1040, startx;
        mov.u32         tmps1, imGx;
        add.s32         rgx, tmps1, tmps2;
        mov.u32         tmps1, imHx;
        add.s32         rhx, tmps1, tmps2;
        @!%p1 bra       BB20_2;
        bra.uni         BB20_1;

BB20_1:
//Calculate source pointer
        mad.lo.s32      tmps1, imline, rimgstep, startx;
        cvta.to.global.u32      tmps2, rimgptr;
        add.s32         srcptr, tmps2, tmps1;

//Try to prefetch
        add.s32         tmps3, rimgptr, tmps1;
        prefetch.global.L1 [srcptr];

//Load source data
        ld.global.u8    %rs1, [srcptr];
        ld.global.u8    %r25, [srcptr+1];
        ld.global.u8    %r26, [srcptr+2];
        ld.global.u8    %r27, [srcptr+3];
        ld.global.u8    %r28, [srcptr+4];
        ld.global.u8    %r29, [srcptr+5];
        ld.global.u8    %r30, [srcptr+6];
        ld.global.u8    %r31, [srcptr+7];
        ld.global.u8    %r32, [srcptr+8];
        ld.global.u8    %r33, [srcptr+9];
        ld.global.u8    %r34, [srcptr+10];
        ld.global.u8    %r35, [srcptr+11];
        ld.global.u8    %rs2, [srcptr+12];

//Load GX
        st.shared.u8    [rgx], %rs1;
        cvt.u32.u16     %r36, %rs1;
        and.b32         %r37, %r36, 255;
        max.s32         %r38, %r37, %r25;
        st.shared.u8    [rgx+1], %r38;
        and.b32         %r39, %r38, 255;
        max.s32         %r40, %r39, %r26;
        st.shared.u8    [rgx+2], %r40;
        and.b32         %r41, %r40, 255;
        max.s32         %r42, %r41, %r27;
        st.shared.u8    [rgx+3], %r42;
        and.b32         %r43, %r42, 255;
        max.s32         %r44, %r43, %r28;
        st.shared.u8    [rgx+4], %r44;
        and.b32         %r45, %r44, 255;
        max.s32         %r46, %r45, %r29;
        st.shared.u8    [rgx+5], %r46;
        and.b32         %r47, %r46, 255;
        max.s32         %r48, %r47, %r30;
        st.shared.u8    [rgx+6], %r48;
        and.b32         %r49, %r48, 255;
        max.s32         %r50, %r49, %r31;
        st.shared.u8    [rgx+7], %r50;
        and.b32         %r51, %r50, 255;
        max.s32         %r52, %r51, %r32;
        st.shared.u8    [rgx+8], %r52;
        and.b32         %r53, %r52, 255;
        max.s32         %r54, %r53, %r33;
        st.shared.u8    [rgx+9], %r54;
        and.b32         %r55, %r54, 255;
        max.s32         %r56, %r55, %r34;
        st.shared.u8    [rgx+10], %r56;
        and.b32         %r57, %r56, 255;
        max.s32         %r58, %r57, %r35;
        st.shared.u8    [rgx+11], %r58;
        and.b32         %r59, %r58, 255;
        cvt.u32.u16     %r60, %rs2;
        and.b32         %r61, %r60, 255;
        max.s32         %r62, %r59, %r61;
        st.shared.u8    [rgx+12], %r62;
        st.shared.u8    [rhx+12], %rs2;
        max.s32         %r63, %r61, %r35;
        st.shared.u8    [rhx+11], %r63;
        and.b32         %r64, %r63, 255;
        max.s32         %r65, %r64, %r34;
        st.shared.u8    [rhx+10], %r65;
        and.b32         %r66, %r65, 255;
        max.s32         %r67, %r66, %r33;
        st.shared.u8    [rhx+9], %r67;
        and.b32         %r68, %r67, 255;
        max.s32         %r69, %r68, %r32;
        st.shared.u8    [rhx+8], %r69;
        and.b32         %r70, %r69, 255;
        max.s32         %r71, %r70, %r31;
        st.shared.u8    [rhx+7], %r71;
        and.b32         %r72, %r71, 255;
        max.s32         %r73, %r72, %r30;
        st.shared.u8    [rhx+6], %r73;
        and.b32         %r74, %r73, 255;
        max.s32         %r75, %r74, %r29;
        st.shared.u8    [rhx+5], %r75;
        and.b32         %r76, %r75, 255;
        max.s32         %r77, %r76, %r28;
        st.shared.u8    [rhx+4], %r77;
        and.b32         %r78, %r77, 255;
        max.s32         %r79, %r78, %r27;
        st.shared.u8    [rhx+3], %r79;
        and.b32         %r80, %r79, 255;
        max.s32         %r81, %r80, %r26;
        st.shared.u8    [rhx+2], %r81;
        and.b32         %r82, %r81, 255;
        max.s32         %r83, %r82, %r25;
        st.shared.u8    [rhx+1], %r83;
        and.b32         %r84, %r83, 255;
        max.s32         %r85, %r84, %r37;
        st.shared.u8    [rhx], %r85;

BB20_2:
        bar.sync        0;
        @!%p1 bra       BB20_4;
        bra.uni         BB20_3;

BB20_3:
        cvta.to.global.u32      %r86, rresptr;
        mad.lo.s32      %r87, imline, rresstep, startx;
        add.s32         %r88, %r86, %r87;
        ld.shared.u8    %r89, [rgx+6];
        ld.shared.u8    %r90, [rhx+-6];
        max.s32         %r91, %r89, %r90;
        st.global.u8    [%r88], %r91;
        ld.shared.u8    %r92, [rgx+7];
        ld.shared.u8    %r93, [rhx+-5];
        max.s32         %r94, %r92, %r93;
        st.global.u8    [%r88+1], %r94;
        ld.shared.u8    %r95, [rgx+8];
        ld.shared.u8    %r96, [rhx+-4];
        max.s32         %r97, %r95, %r96;
        st.global.u8    [%r88+2], %r97;
        ld.shared.u8    %r98, [rgx+9];
        ld.shared.u8    %r99, [rhx+-3];
        max.s32         %r100, %r98, %r99;
        st.global.u8    [%r88+3], %r100;
        ld.shared.u8    %r101, [rgx+10];
        ld.shared.u8    %r102, [rhx+-2];
        max.s32         %r103, %r101, %r102;
        st.global.u8    [%r88+4], %r103;
        ld.shared.u8    %r104, [rgx+11];
        ld.shared.u8    %r105, [rhx+-1];
        max.s32         %r106, %r104, %r105;
        st.global.u8    [%r88+5], %r106;
        ld.shared.u8    %r107, [rgx+12];
        ld.shared.u8    %r108, [rhx];
        max.s32         %r109, %r107, %r108;
        st.global.u8    [%r88+6], %r109;
        ld.shared.u8    %r110, [rgx+13];
        ld.shared.u8    %r111, [rhx+1];
        max.s32         %r112, %r110, %r111;
        st.global.u8    [%r88+7], %r112;
        ld.shared.u8    %r113, [rgx+14];
        ld.shared.u8    %r114, [rhx+2];
        max.s32         %r115, %r113, %r114;
        st.global.u8    [%r88+8], %r115;
        ld.shared.u8    %r116, [rgx+15];
        ld.shared.u8    %r117, [rhx+3];
        max.s32         %r118, %r116, %r117;
        st.global.u8    [%r88+9], %r118;
        ld.shared.u8    %r119, [rgx+16];
        ld.shared.u8    %r120, [rhx+4];
        max.s32         %r121, %r119, %r120;
        st.global.u8    [%r88+10], %r121;
        ld.shared.u8    %r122, [rgx+17];
        ld.shared.u8    %r123, [rhx+5];
        max.s32         %r124, %r122, %r123;
        st.global.u8    [%r88+11], %r124;
        ld.shared.u8    %r125, [rgx+18];
        ld.shared.u8    %r126, [rhx+6];
        max.s32         %r127, %r125, %r126;
        st.global.u8    [%r88+12], %r127;
BB20_4:
        ret;
}
